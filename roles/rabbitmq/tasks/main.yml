- name: Configure RabbitMQ storage
  block:
    - name: Ensure mount point exists for RabbitMQ NFS
      file:
        path: "{{ rabbitmq.data_dir }}"
        state: directory
        mode: '0750'
        owner: rabbitmq
        group: rabbitmq
      become: yes

    - name: Install NFS client
      package:
        name: "{{ nfs_client_package }}"
        state: present
      vars:
        nfs_client_package: "{{ ansible_os_family | lower | regex_replace('debian', 'nfs-common') | regex_replace('redhat', 'nfs-utils') }}"
      become: yes

    - name: Mount RabbitMQ NFS share
      mount:
        path: "{{ rabbitmq.data_dir }}"
        src: "{{ storage.nfs.server }}:{{ storage.nfs.export_path }}{{ storage.nfs.rabbitmq_path }}"
        fstype: nfs
        opts: "{{ storage.nfs.opts }}"
        state: mounted
      become: yes

  when: storage.type == "nfs"

- name: Ensure correct permissions on RabbitMQ data directory
  file:
    path: "{{ rabbitmq.data_dir }}"
    owner: rabbitmq
    group: rabbitmq
    mode: '0750'
    recurse: yes
  become: yes
  when: storage.type == "nfs"

- name: Add Team RabbitMQ's main signing key
  shell: |
    curl -1sLf "https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA" | gpg --dearmor | tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null
  become: yes

- name: Add Cloudsmith Erlang repository key
  shell: |
    curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | gpg --dearmor | tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null
  become: yes

- name: Add Cloudsmith RabbitMQ repository key
  shell: |
    curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | gpg --dearmor | tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null
  become: yes

- name: Add RabbitMQ APT repositories
  copy:
    content: |
      ## Provides modern Erlang/OTP releases from a Cloudsmith mirror
      deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main
      deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main
      deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main
      deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main
      ## Provides RabbitMQ from a Cloudsmith mirror
      deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main
      deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main
      deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main
      deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main
    dest: /etc/apt/sources.list.d/rabbitmq.list
  become: yes

- name: Update APT cache
  apt:
    update_cache: yes
  become: yes

- name: Install Erlang packages
  apt:
    name:
      - erlang-base
      - erlang-asn1
      - erlang-crypto
      - erlang-eldap
      - erlang-ftp
      - erlang-inets
      - erlang-mnesia
      - erlang-os-mon
      - erlang-parsetools
      - erlang-public-key
      - erlang-runtime-tools
      - erlang-snmp
      - erlang-ssl
      - erlang-syntax-tools
      - erlang-tftp
      - erlang-tools
      - erlang-xmerl
    state: present
  become: yes


- name: Install RabbitMQ Server
  apt:
    name: rabbitmq-server
    state: present
    update_cache: yes
  become: yes


- name: Configure RabbitMQ environment
  template:
    src: rabbitmq-env.conf.j2
    dest: /etc/rabbitmq/rabbitmq-env.conf
    owner: root
    group: rabbitmq
    mode: '0644'
  become: yes
  notify: Restart RabbitMQ

# Phase 3: System Configuration
- name: Adjust system limits for RabbitMQ
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop: "{{ rabbitmq.sysctl | dict2items }}"
  become: yes

# Phase 4: SSL Configuration
- name: Ensure RabbitMQ certs directory exists
  file:
    path: "{{ rabbitmq.ssl.certs_dir }}"
    state: directory
    mode: '0700'
    owner: rabbitmq
    group: rabbitmq
  become: yes

- name: Clean up existing certificates in RabbitMQ certs directory
  file:
    path: "{{ item }}"
    state: absent
  with_fileglob:
    - "{{ rabbitmq.ssl.certs_dir }}/*"
  become: yes

- name: Copy certificates to remote servers
  copy:
    src: "{{ playbook_dir }}/files/certs/rabbitmq/{{ item }}"
    dest: "{{ rabbitmq.ssl.certs_dir }}/{{ item }}"
    owner: rabbitmq
    group: rabbitmq
    mode: '0600'
  become: yes
  become_user: root
  loop: "{{ lookup('fileglob', playbook_dir + '/files/certs/rabbitmq/*', wantlist=True) | map('basename') }}"

# Phase 5: RabbitMQ Base Configuration
- name: Configure RabbitMQ SSL settings
  blockinfile:
    path: /etc/rabbitmq/rabbitmq.conf
    create: yes
    block: |
      # AMQP Listeners
      listeners.tcp.default = 5672
      listeners.ssl.default = 5671
      
      # Management listeners
      management.ssl.port   = 15671
      management.tcp.port   = 15672
      
      # SSL Configuration
      ssl_options.verify = verify_peer
      ssl_options.fail_if_no_peer_cert = true
      ssl_options.cacertfile = /var/lib/rabbitmq/certs/ca.crt
      ssl_options.certfile = /var/lib/rabbitmq/certs/rabbitmq.crt
      ssl_options.keyfile = /var/lib/rabbitmq/certs/rabbitmq.key
      
      # Management SSL Configuration
      management.ssl.cacertfile = /var/lib/rabbitmq/certs/ca.crt
      management.ssl.certfile = /var/lib/rabbitmq/certs/rabbitmq.crt
      management.ssl.keyfile = /var/lib/rabbitmq/certs/rabbitmq.key

- name: Configure RabbitMQ memory high watermark
  blockinfile:
    path: /etc/rabbitmq/rabbitmq.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK - memory watermark"
    block: |
      vm_memory_high_watermark.relative = 0.4
    create: yes
  become: yes

- name: Configure RabbitMQ disk free limit
  blockinfile:
    path: /etc/rabbitmq/rabbitmq.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK - disk limit"
    block: |
      disk_free_limit.relative = 0.2
    create: yes
  become: yes

# Phase 6: Service Start and Plugin Enable
- name: Enable RabbitMQ Management Plugin
  rabbitmq_plugin:
    names: rabbitmq_management
    state: enabled
  become: yes

- name: Ensure RabbitMQ service is started and enabled
  service:
    name: rabbitmq-server
    state: started
    enabled: yes
  become: yes

# Phase 7: Add RabbitMQ user to groups
- name: Add RabbitMQ user to cockroach group
  user:
    name: rabbitmq
    groups: "{{ cockroachdb.group }}"
    append: yes
  become: yes

# Phase 8: Wait for RabbitMQ to be fully started
- name: Wait for RabbitMQ to be ready
  wait_for:
    port: 5672
    delay: 10
    timeout: 30

# Phase 9: User Management
- name: Disable the guest user
  rabbitmq_user:
    name: guest
    state: absent
  become: yes

- name: Create admin user
  rabbitmq_user:
    name: "{{ rabbitmq.admin_user }}"
    password: "{{ vault_rabbitmq_admin_password }}"
    tags: administrator
    state: present
  become: yes

- name: Add RabbitMQ web management user
  rabbitmq_user:
    name: "{{ rabbitmq.web_admin_user }}"
    password: "{{ vault_rabbitmq_web_admin_password}}"
    tags: administrator
    state: present
  become: yes

- name: Set permissions for admin user
  rabbitmq_user:
    user: "{{ rabbitmq.admin_user }}"
    vhost: /
    configure_priv: "^.*"
    write_priv: "^.*"
    read_priv: "^.*"
    state: present
  become: yes