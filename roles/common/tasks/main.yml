- name: Update system
  apt:
    update_cache: yes
    upgrade: yes

- name: Install required packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - python3-pip
      - ufw
      - fail2ban
      - chrony
      - acl
      - logrotate
      - net-tools
    state: present

- name: Configure system limits
  pam_limits:
    domain: cockroach
    limit_type: "{{ item.type }}"
    limit_item: "{{ item.item }}"
    value: "{{ item.value }}"
  loop:
    - { type: soft, item: nofile, value: 65536 }
    - { type: hard, item: nofile, value: 65536 }
    - { type: soft, item: nproc, value: 32768 }
    - { type: hard, item: nproc, value: 32768 }

- name: Configure sysctl
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/60-cockroachdb.conf
    reload: yes
  loop:
    - { name: "vm.swappiness", value: "1" }
    - { name: "vm.max_map_count", value: "262144" }
    - { name: "net.core.somaxconn", value: "65535" }
    - { name: "net.ipv4.tcp_max_syn_backlog", value: "65535" }
    - { name: "net.ipv4.tcp_syncookies", value: "1" }
    - { name: "net.ipv4.tcp_fin_timeout", value: "30" }

- name: Create cockroach group
  group:
    name: "{{ cockroachdb.group }}"
    system: yes
  become: yes

- name: Create cockroach user
  user:
    name: "{{ cockroachdb.user }}"
    group: "{{ cockroachdb.group }}"
    shell: /bin/false
    home: "{{ cockroachdb.data_dir }}"
    create_home: no
  become: yes

- name: Debug cockroach user
  command: getent passwd cockroach
  register: debug_user
- debug:
    var: debug_user.stdout
- name: Update system
  apt:
    update_cache: yes
    upgrade: yes

- name: Install required packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - python3-pip
      - ufw
      - fail2ban
      - chrony
      - acl
      - logrotate
      - net-tools
    state: present


- name: Configure NFS storage
  block:
    - name: Ensure mount points exist for NFS
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ cockroachdb.user }}"
        group: "{{ cockroachdb.group }}"
        mode: '0750'
      loop:
        - "{{ cockroachdb.data_dir }}"
        - "{{ cockroachdb.log_dir }}"

    - name: Install NFS client
      package:
        name: "{{ nfs_client_package }}"
        state: present
      vars:
        nfs_client_package: "{{ ansible_os_family | lower | regex_replace('debian', 'nfs-common') | regex_replace('redhat', 'nfs-utils') }}"

    - name: Mount NFS shares
      mount:
        path: "{{ item.path }}"
        src: "{{ storage.nfs.server }}:{{ storage.nfs.export_path }}{{ item.remote_path }}"
        fstype: nfs
        opts: "{{ storage.nfs.opts }}"
        state: mounted
      loop:
        - { path: "{{ cockroachdb.data_dir }}", remote_path: "{{ storage.nfs.mount_path }}" }
        - { path: "{{ cockroachdb.log_dir }}", remote_path: "{{ storage.nfs.log_path }}" }

  when: storage.type == "nfs"



- name: Configure system limits
  pam_limits:
    domain: cockroach
    limit_type: "{{ item.type }}"
    limit_item: "{{ item.item }}"
    value: "{{ item.value }}"
  loop:
    - { type: soft, item: nofile, value: 65536 }
    - { type: hard, item: nofile, value: 65536 }
    - { type: soft, item: nproc, value: 32768 }
    - { type: hard, item: nproc, value: 32768 }

- name: Configure sysctl
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/60-cockroachdb.conf
    reload: yes
  loop:
    - { name: "vm.swappiness", value: "1" }
    - { name: "vm.max_map_count", value: "262144" }
    - { name: "net.core.somaxconn", value: "65535" }
    - { name: "net.ipv4.tcp_max_syn_backlog", value: "65535" }
    - { name: "net.ipv4.tcp_syncookies", value: "1" }
    - { name: "net.ipv4.tcp_fin_timeout", value: "30" }

- name: Create cockroach group
  group:
    name: "{{ cockroachdb.group }}"
    system: yes
  become: yes

- name: Create cockroach user
  user:
    name: "{{ cockroachdb.user }}"
    group: "{{ cockroachdb.group }}"
    shell: /bin/false
    home: "{{ cockroachdb.data_dir }}"
    create_home: no
  become: yes

- name: Debug cockroach user
  command: getent passwd cockroach
  register: debug_user
- debug:
    var: debug_user.stdout
